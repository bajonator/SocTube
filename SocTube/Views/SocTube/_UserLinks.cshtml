@model SocTube.Core.Models.Domains.Link


@using (Html.BeginForm("SaveLink", "SocTube", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Id)

    <div class="border-light border-top border-left">
        <div class="row text-right justify-content-center mt-5">
            <div class="form-group col-md-4">
                @if (Model.Id == 0)
                {
                    <h5>Dodawanie innego linku</h5>
                }
                else
                {
                    <h5>Edycja linku</h5>
                }
            </div>
        </div>
        <div class="row text-right justify-content-center">
            <div class="form-group mt-3 col-md-3">
                @Html.LabelFor(x => x.Name)
            </div>
            <div class="form-group mt-3 ml-3 col-md-5">
                @Html.TextBoxFor(x => x.Name, new { @class = "form-control bg-dark text-white", autofocus = "autofocus" })
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
        </div>
        <div class="row text-right justify-content-center">
            <div class="form-group mt-3 col-md-3">
                @Html.LabelFor(x => x.Url)
            </div>
            <div class="form-group mt-3 ml-3 col-md-5">
                @Html.TextBoxFor(x => x.Url, new { @class = "form-control bg-dark text-white" })
                <span asp-validation-for="Url" class="text-danger"></span>
            </div>
        </div>
        <div class="row text-right justify-content-center">
            <div class="form-group mt-3 col-md-3">
                <label class="form-check-label" for="IsVisible">Widoczność</label>
            </div>
            <div class="form-check form-switch mt-3 col-md-5">
                @Html.CheckBoxFor(x => x.IsVisible, new { @class = "form-check-input", @id = "IsVisible" })
                <label class="form-check-label" for="IsVisible">zaznacz jeśli ten link ma być widoczny</label>
            </div>
        </div>
        <div class="d-flex flex-column text-center justify-content-center align-items-center">
            <button class="btn btn-primary btn-lg" type="submit">
                Zapisz
            </button>
        </div>
        @if (Model.Id == 0)
        {
            <div class="d-flex justify-content-center">

                <div class="form-group border border-warning-subtle col-md-8 mt-5 ml-2">
                    <label for="ButtonStyle">
                        Wybierz styl dla linków: <br>
                        <small class="text-danger">*Uwaga: Po kliknieciu wszystkie linki zaktualizuja swoj styl</small>
                    </label>

                    <div class="btn-group d-flex flex-wrap mt-3">
                        <button type="button" class="btn rounded btn-sm btn-primary btn-preview ml-1 non-changing-btn" data-style="btn-primary">Primary</button>
                        <button type="button" class="btn rounded btn-sm btn-secondary btn-preview ml-1 non-changing-btn" data-style="btn-secondary">Secondary</button>
                        <button type="button" class="btn rounded btn-sm btn-success btn-preview ml-1 non-changing-btn" data-style="btn-success">Success</button>
                        <button type="button" class="btn rounded btn-sm btn-danger btn-preview ml-1 non-changing-btn" data-style="btn-danger">Danger</button>
                        <button type="button" class="btn rounded btn-sm btn-warning btn-preview ml-1 non-changing-btn" data-style="btn-warning">Warning</button>
                        <button type="button" class="btn rounded btn-sm btn-info btn-preview ml-1 non-changing-btn" data-style="btn-info">Info</button>
                        <button type="button" class="btn rounded btn-sm btn-light btn-preview ml-1 non-changing-btn" data-style="btn-light">Light</button>
                    </div>
                    <div class="btn-group d-flex flex-wrap mt-1 mb-2">
                        <button type="button" class="btn rounded btn-sm btn-outline-primary btn-preview ml-1 non-changing-btn" data-style="btn-outline-primary">Primary</button>
                        <button type="button" class="btn rounded btn-sm btn-outline-secondary btn-preview ml-1 non-changing-btn" data-style="btn-outline-secondary">Secondary</button>
                        <button type="button" class="btn rounded btn-sm btn-outline-success btn-preview ml-1 non-changing-btn" data-style="btn-outline-success">Success</button>
                        <button type="button" class="btn rounded btn-sm btn-outline-danger btn-preview ml-1 non-changing-btn" data-style="btn-outline-danger">Danger</button>
                        <button type="button" class="btn rounded btn-sm btn-outline-warning btn-preview ml-1 non-changing-btn" data-style="btn-outline-warning">Warning</button>
                        <button type="button" class="btn rounded btn-sm btn-outline-info btn-preview ml-1 non-changing-btn" data-style="btn-outline-info">Info</button>
                        <button type="button" class="btn rounded btn-sm btn-outline-light btn-preview ml-1 non-changing-btn" data-style="btn-outline-light">Light</button>
                    </div>
                    @Html.HiddenFor(x => x.ButtonStyle, new { id = "HiddenButtonStyle" })
                </div>
            </div>
        }
    </div>
}
